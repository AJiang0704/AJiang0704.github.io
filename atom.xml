<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AJiang&#39;s Blog</title>
  
  
  <link href="https://ajiang0704.github.io/atom.xml" rel="self"/>
  
  <link href="https://ajiang0704.github.io/"/>
  <updated>2024-09-11T11:02:39.742Z</updated>
  <id>https://ajiang0704.github.io/</id>
  
  <author>
    <name>AJiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从零开始部署服务器</title>
    <link href="https://ajiang0704.github.io/2022/06/15/13-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://ajiang0704.github.io/2022/06/15/13-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-06-14T16:00:00.000Z</published>
    <updated>2024-09-11T11:02:39.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>Ubuntu 16.04</p><h1 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h1><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo su root</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>hostname</span><br><span class="line">vim <span class="regexp">/etc/</span>hosts</span><br><span class="line"></span><br><span class="line">重启以生效</span><br></pre></td></tr></table></figure><h1 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h1><h2 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><h2 id="安装xrdp"><a href="#安装xrdp" class="headerlink" title="安装xrdp"></a>安装xrdp</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install xrdp</span><br></pre></td></tr></table></figure><h2 id="安装vnc4server"><a href="#安装vnc4server" class="headerlink" title="安装vnc4server"></a>安装vnc4server</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install vnc4server</span><br></pre></td></tr></table></figure><h2 id="安装xubuntu-desktop"><a href="#安装xubuntu-desktop" class="headerlink" title="安装xubuntu-desktop"></a>安装xubuntu-desktop</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install xubuntu-desktop</span><br></pre></td></tr></table></figure><h2 id="开启xrdp服务"><a href="#开启xrdp服务" class="headerlink" title="开启xrdp服务"></a>开启xrdp服务</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>xrdp restart</span><br><span class="line"></span><br><span class="line">开放3389端口即可进行远程连接</span><br></pre></td></tr></table></figure><h2 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">先在language support中下载汉语包</span><br><span class="line"></span><br><span class="line">再改<span class="regexp">/etc/</span><span class="keyword">default</span>/locale内容为LANG=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line"></span><br><span class="line">重启以生效</span><br></pre></td></tr></table></figure><h1 id="安装Apache2"><a href="#安装Apache2" class="headerlink" title="安装Apache2"></a>安装Apache2</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> apt install apache<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> php</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install libapache2-<span class="keyword">mod</span>-php</span><br></pre></td></tr></table></figure><h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> apt install mysql-server php<span class="number">7</span>.<span class="number">0</span>-mysql</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-client</span><br><span class="line"></span><br><span class="line">可能报错：</span><br><span class="line">dpkg: 警告: 在 PATH 环境变量中找不到 ldconfig 或没有可执行权限</span><br><span class="line">dpkg: 警告: 在 PATH 环境变量中找不到 start-stop-daemon 或没有可执行权限</span><br><span class="line">dpkg: 错误: <span class="number">2</span> 在环境变量 PATH 中找不到该程序，或不可执行</span><br><span class="line">提示：root 的 PATH 环境变量通常应当包含 <span class="regexp">/usr/</span>local<span class="regexp">/sbin、/u</span>sr<span class="regexp">/sbin 和 /</span>sbin</span><br><span class="line"></span><br><span class="line">解决方法：</span><br><span class="line">vi ~/.bashrc</span><br><span class="line">添加export PATH=<span class="regexp">/usr/</span>loca<span class="regexp">/sbin:/u</span>sr<span class="regexp">/sbin:/</span>sbin:$PATH</span><br><span class="line"><span class="keyword">source</span> ~/.bashrc</span><br><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql_secure_installation</span></span><br></pre></td></tr></table></figure><h1 id="安装phpmyadmin"><a href="#安装phpmyadmin" class="headerlink" title="安装phpmyadmin"></a>安装phpmyadmin</h1><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">sudo  apt-get install  phpmyadmin</span><br><span class="line"></span><br><span class="line">注：如果出现无法获得锁的情况，使用下面命令：</span><br><span class="line"></span><br><span class="line">sudo rm /var/cache/apt/archives/lock</span><br><span class="line">sudo rm /var/<span class="class"><span class="keyword">lib</span>/<span class="title">dpkg</span>/<span class="title">lock</span></span></span><br></pre></td></tr></table></figure><h2 id="安装必要依赖包"><a href="#安装必要依赖包" class="headerlink" title="安装必要依赖包"></a>安装必要依赖包</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install php-mbstring</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install php-gettext</span><br></pre></td></tr></table></figure><h2 id="建立-var-www-html-下的软连接"><a href="#建立-var-www-html-下的软连接" class="headerlink" title="建立/var/www/html 下的软连接"></a>建立/var/www/html 下的软连接</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo ln -s <span class="regexp">/usr/</span>share<span class="regexp">/phpmyadmin /</span>var<span class="regexp">/www/</span>html/phpmyadmin</span><br></pre></td></tr></table></figure><h2 id="修改PHP配置文件"><a href="#修改PHP配置文件" class="headerlink" title="修改PHP配置文件"></a>修改PHP配置文件</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> gedit etc/php/<span class="number">7</span>.<span class="number">2</span>/apache<span class="number">2</span>/php.ini</span><br><span class="line"></span><br><span class="line"><span class="attribute">1</span>. 搜索 display_errors，找到第二个改为 display_errors = <span class="literal">On</span>  </span><br><span class="line"><span class="attribute">2</span>. 添加一条：;extension=php_mbstring.dll   (开启mbstring)</span><br></pre></td></tr></table></figure><h2 id="重启apache"><a href="#重启apache" class="headerlink" title="重启apache"></a>重启apache</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/apache2 restart</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="将文件-文件夹从本地拷贝至远程服务器"><a href="#将文件-文件夹从本地拷贝至远程服务器" class="headerlink" title="将文件/文件夹从本地拷贝至远程服务器"></a>将文件/文件夹从本地拷贝至远程服务器</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">scp -r test.txt root<span class="variable">@121</span>.<span class="number">41.164</span>.<span class="number">172</span><span class="symbol">:/root/Documents</span></span><br></pre></td></tr></table></figure><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;p&gt;Ubuntu 16.04&lt;/p&gt;
&lt;h1 id=&quot;修改主机名&quot;&gt;&lt;a href=&quot;#修改主机名&quot; class=&quot;header</summary>
      
    
    
    
    <category term="技术杂谈" scheme="https://ajiang0704.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="Apache" scheme="https://ajiang0704.github.io/tags/Apache/"/>
    
    <category term="PHP" scheme="https://ajiang0704.github.io/tags/PHP/"/>
    
    <category term="MySQL" scheme="https://ajiang0704.github.io/tags/MySQL/"/>
    
    <category term="Linux" scheme="https://ajiang0704.github.io/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://ajiang0704.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>对称的二叉树</title>
    <link href="https://ajiang0704.github.io/2021/09/28/12-%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://ajiang0704.github.io/2021/09/28/12-%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-09-27T16:00:00.000Z</published>
    <updated>2025-08-26T04:20:58.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>请实现一个函数，用来判断一棵二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：&#123;<span class="number">8</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">返回值：<span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：&#123;<span class="number">8</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">返回值：<span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment">    Val int</span></span><br><span class="line"><span class="comment">    Left *TreeNode</span></span><br><span class="line"><span class="comment">    Right *TreeNode</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMirror</span><span class="params">( tree1, tree2 *TreeNode )</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> tree1 == <span class="literal">nil</span> || tree2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> tree1 == <span class="literal">nil</span> &amp;&amp; tree2 == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tree1.Val == tree2.Val &amp;&amp; isMirror(tree1.Left, tree2.Right) &amp;&amp; isMirror(tree1.Right, tree2.Left)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetrical</span><span class="params">( pRoot *TreeNode )</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> pRoot == <span class="literal">nil</span> &#123; <span class="comment">// 空树</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isMirror(pRoot.Left, pRoot.Right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;请实现一个函数，用来判断一棵二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。&lt;/p&gt;
&lt;h1 id=&quot;示例</summary>
      
    
    
    
    <category term="《剑指Offer》的Go语言实现" scheme="https://ajiang0704.github.io/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B%E7%9A%84Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    
    
    <category term="剑指Offer" scheme="https://ajiang0704.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="Golang" scheme="https://ajiang0704.github.io/tags/Golang/"/>
    
    <category term="Go语言" scheme="https://ajiang0704.github.io/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
    <category term="树" scheme="https://ajiang0704.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>从上往下打印二叉树</title>
    <link href="https://ajiang0704.github.io/2021/08/23/11-%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://ajiang0704.github.io/2021/08/23/11-%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-08-22T16:00:00.000Z</published>
    <updated>2025-08-26T04:20:52.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：&#123;<span class="number">5</span>,<span class="number">4</span>,#,<span class="number">3</span>,#,<span class="number">2</span>,#,<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">返回值：[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment">    Val int</span></span><br><span class="line"><span class="comment">    Left *TreeNode</span></span><br><span class="line"><span class="comment">    Right *TreeNode</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintFromTopToBottom</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ans []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="comment">//空树</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">    queue := []*TreeNode&#123;root&#125; <span class="comment">//创建队列并插入根节点</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        node := queue[<span class="number">0</span>] <span class="comment">//将队列最前面的节点赋值给node</span></span><br><span class="line">        queue = queue[<span class="number">1</span>:] <span class="comment">//删除队列最前面的节点</span></span><br><span class="line">        ans = <span class="built_in">append</span>(ans, node.Val) <span class="comment">//将node值插入ans尾部</span></span><br><span class="line">        <span class="keyword">if</span> node.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, node.Left) <span class="comment">//如果有左结点则插入队列</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> node.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, node.Right) <span class="comment">//如果有右结点则插入队列</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;从上往下打印出二叉树的每个节点，同层节点从左至右打印。&lt;/p&gt;
&lt;h1 id=&quot;示例1&quot;&gt;&lt;a href=&quot;#示例1&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="《剑指Offer》的Go语言实现" scheme="https://ajiang0704.github.io/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B%E7%9A%84Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    
    
    <category term="剑指Offer" scheme="https://ajiang0704.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="Golang" scheme="https://ajiang0704.github.io/tags/Golang/"/>
    
    <category term="Go语言" scheme="https://ajiang0704.github.io/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
    <category term="树" scheme="https://ajiang0704.github.io/tags/%E6%A0%91/"/>
    
    <category term="队列" scheme="https://ajiang0704.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="https://ajiang0704.github.io/2021/08/06/10-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://ajiang0704.github.io/2021/08/06/10-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</id>
    <published>2021-08-05T16:00:00.000Z</published>
    <updated>2025-08-26T04:20:45.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>用两个栈来实现一个队列，完成 n 次在队列尾部插入整数(push)和在队列头部删除整数(pop)的功能。 队列中的元素为int类型。保证操作合法，即保证pop操作时队列内已有元素。</p><p>数据范围：n &lt;= 1000</p><p>要求：空间复杂度O(n) ，时间复杂度O(1)</p><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">输入：[<span class="string">&quot;PSH1&quot;</span>,<span class="string">&quot;PSH2&quot;</span>,<span class="string">&quot;POP&quot;</span>,<span class="string">&quot;POP&quot;</span>]</span><br><span class="line"></span><br><span class="line">返回值：<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"></span><br><span class="line">说明：<span class="string">&quot;PSH1&quot;</span>:代表将<span class="number">1</span>插入队列尾部</span><br><span class="line">     <span class="string">&quot;PSH2&quot;</span>:代表将<span class="number">2</span>插入队列尾部</span><br><span class="line">     <span class="string">&quot;POP&quot;</span>:代表删除一个元素，先进先出=&gt;返回<span class="number">1</span></span><br><span class="line">     <span class="string">&quot;POP&quot;</span>:代表删除一个元素，先进先出=&gt;返回<span class="number">2</span> </span><br></pre></td></tr></table></figure><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stack1 [] <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> stack2 [] <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Push</span><span class="params">(node <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    stack1 = <span class="built_in">append</span>(stack1, node) <span class="comment">//直接压栈到stack1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(stack2) == <span class="number">0</span> &#123; <span class="comment">//stack2为空时，从后往前移动stack1的内容到stack2</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(stack1); i ++ &#123;</span><br><span class="line">            stack2 = <span class="built_in">append</span>(stack2, stack1[<span class="built_in">len</span>(stack1) - i - <span class="number">1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        stack1 = []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans := stack2[<span class="built_in">len</span>(stack2) - <span class="number">1</span>] <span class="comment">//获取stack2最后一个位置的元素作为栈顶元素</span></span><br><span class="line">    stack2 = stack2[:<span class="built_in">len</span>(stack2) - <span class="number">1</span>] <span class="comment">//删除栈顶元素</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;用两个栈来实现一个队列，完成 n 次在队列尾部插入整数(push)和在队列头部删除整数(pop)的功能。 队列中的元素为int类型。保证操作</summary>
      
    
    
    
    <category term="《剑指Offer》的Go语言实现" scheme="https://ajiang0704.github.io/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B%E7%9A%84Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    
    
    <category term="剑指Offer" scheme="https://ajiang0704.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="Golang" scheme="https://ajiang0704.github.io/tags/Golang/"/>
    
    <category term="Go语言" scheme="https://ajiang0704.github.io/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
    <category term="栈" scheme="https://ajiang0704.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>重建二叉树</title>
    <link href="https://ajiang0704.github.io/2021/08/05/9-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://ajiang0704.github.io/2021/08/05/9-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-08-04T16:00:00.000Z</published>
    <updated>2025-08-26T10:58:37.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定节点数为 n 二叉树的前序遍历和中序遍历结果，请重建出该二叉树并返回它的头结点。<br>例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建树如下图所示：</p><p><img src="https://free.picui.cn/free/2025/08/26/68ad932d61e1c.png" alt="二叉树"></p><p>提示:</p><p>1.vin.length == pre.length</p><p>2.pre 和 vin 均无重复元素</p><p>3.vin 出现的元素均出现在 pre 里</p><p>4.只需要返回根结点，系统会自动输出整颗树做答案对比</p><p>数据范围：n &lt;= 2000，节点的值 -10000 &lt;= val &lt;= 10000</p><p>要求：空间复杂度O(n) ，时间复杂度O(n)</p><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>],[<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">返回值：&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,#,<span class="number">5</span>,<span class="number">6</span>,#,<span class="number">7</span>,#,#,<span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line">说明：返回根节点，系统会输出整颗二叉树对比结果，重建结果如题面图示</span><br></pre></td></tr></table></figure><h1 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>],[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">返回值：&#123;<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">返回值：&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment">    Val int</span></span><br><span class="line"><span class="comment">    Left *TreeNode</span></span><br><span class="line"><span class="comment">    Right *TreeNode</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reConstructBinaryTree</span><span class="params">(pre []<span class="keyword">int</span>, vin []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">    length := <span class="built_in">len</span>(pre) <span class="comment">//前序遍历和中序遍历的长度都是相同的</span></span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    root := &amp;TreeNode&#123;pre[<span class="number">0</span>], <span class="literal">nil</span>, <span class="literal">nil</span>&#125; <span class="comment">//根据前序遍历的第一个节点创建根节点</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">0</span>; i &lt; length; i ++ &#123;</span><br><span class="line">        <span class="keyword">if</span> vin[i] == pre[<span class="number">0</span>] &#123; <span class="comment">//找出在中序遍历中根节点的位置</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root.Left = reConstructBinaryTree(pre[<span class="number">1</span>:<span class="built_in">len</span>(vin[:i])+<span class="number">1</span>], vin[:i]) <span class="comment">//左子树</span></span><br><span class="line">    root.Right = reConstructBinaryTree(pre[<span class="built_in">len</span>(vin[:i])+<span class="number">1</span>:], vin[i+<span class="number">1</span>:]) <span class="comment">//右子树</span></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;给定节点数为 n 二叉树的前序遍历和中序遍历结果，请重建出该二叉树并返回它的头结点。&lt;br&gt;例如输入前序遍历序列{1,2,4,7,3,5,6</summary>
      
    
    
    
    <category term="《剑指Offer》的Go语言实现" scheme="https://ajiang0704.github.io/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B%E7%9A%84Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    
    
    <category term="剑指Offer" scheme="https://ajiang0704.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="Golang" scheme="https://ajiang0704.github.io/tags/Golang/"/>
    
    <category term="Go语言" scheme="https://ajiang0704.github.io/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
    <category term="树" scheme="https://ajiang0704.github.io/tags/%E6%A0%91/"/>
    
    <category term="数组" scheme="https://ajiang0704.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="dfs" scheme="https://ajiang0704.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>从尾到头打印链表</title>
    <link href="https://ajiang0704.github.io/2021/08/04/8-%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>https://ajiang0704.github.io/2021/08/04/8-%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</id>
    <published>2021-08-03T16:00:00.000Z</published>
    <updated>2025-08-26T10:57:32.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。</p><p><img src="https://free.picui.cn/free/2025/08/26/68ad92d81b708.png" alt="链表"></p><p>如输入{1,2,3}的链表如上图，返回一个数组为[3,2,1]。</p><p>0 &lt;= 链表长度 &lt;= 10000</p><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">返回值：[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：&#123;<span class="number">67</span>,<span class="number">0</span>,<span class="number">24</span>,<span class="number">58</span>&#125;</span><br><span class="line"></span><br><span class="line">返回值：[<span class="number">58</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">67</span>]</span><br></pre></td></tr></table></figure><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NodeList <span class="keyword">struct</span> &#123; <span class="comment">//使用struct定义一个单向链表</span></span><br><span class="line">    Val <span class="keyword">int</span></span><br><span class="line">    Next *NodeList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printListFromTailToHead</span><span class="params">(head *ListNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ans []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">        ans = <span class="built_in">append</span>(printListFromTailToHead(head.Next), head.Val) <span class="comment">//将每个节点的值添加到切片</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://free.pi</summary>
      
    
    
    
    <category term="《剑指Offer》的Go语言实现" scheme="https://ajiang0704.github.io/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B%E7%9A%84Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    
    
    <category term="剑指Offer" scheme="https://ajiang0704.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="Golang" scheme="https://ajiang0704.github.io/tags/Golang/"/>
    
    <category term="Go语言" scheme="https://ajiang0704.github.io/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
    <category term="链表" scheme="https://ajiang0704.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>替换空格</title>
    <link href="https://ajiang0704.github.io/2021/08/03/7-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>https://ajiang0704.github.io/2021/08/03/7-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</id>
    <published>2021-08-02T16:00:00.000Z</published>
    <updated>2025-08-26T04:20:27.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">输入：<span class="string">&quot;We Are Happy&quot;</span></span><br><span class="line"></span><br><span class="line">返回值：<span class="string">&quot;We%20Are%20Happy&quot;</span></span><br></pre></td></tr></table></figure><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">replaceSpace</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span> ; i &lt; <span class="built_in">len</span>(s) ; i ++ &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">            str += s[i:i+<span class="number">1</span>] <span class="comment">//一个字符一个字符地拼接</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str += <span class="string">&quot;%20&quot;</span> <span class="comment">//遇到空格时拼接&quot;%20&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are</summary>
      
    
    
    
    <category term="《剑指Offer》的Go语言实现" scheme="https://ajiang0704.github.io/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B%E7%9A%84Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    
    
    <category term="剑指Offer" scheme="https://ajiang0704.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="Golang" scheme="https://ajiang0704.github.io/tags/Golang/"/>
    
    <category term="Go语言" scheme="https://ajiang0704.github.io/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
    <category term="字符串" scheme="https://ajiang0704.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>二维数组中的查找</title>
    <link href="https://ajiang0704.github.io/2021/08/02/6-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>https://ajiang0704.github.io/2021/08/02/6-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</id>
    <published>2021-08-01T16:00:00.000Z</published>
    <updated>2025-08-26T04:20:20.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>在一个二维数组array中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line"> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>,  <span class="number">9</span> ],</span><br><span class="line"> [<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>,  <span class="number">12</span>],</span><br><span class="line"> [<span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>],</span><br><span class="line"> [<span class="number">6</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>给定 target = 7，返回 true。</p><p>给定 target = 3，返回 false。</p><p>0 <= array.length <= 500 </p><p>0 <= array[0].length <= 500 </p><p>你能给出时间复杂度为O(n + m)的解法吗？（n,m为矩阵的长和宽）</p><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：<span class="number">7</span>,[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">12</span>],[<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">13</span>],[<span class="number">6</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">15</span>]]</span><br><span class="line"></span><br><span class="line">返回值：<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">说明：存在<span class="number">7</span>，返回<span class="literal">true</span> </span><br></pre></td></tr></table></figure><h1 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h1><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：<span class="number">3</span>,[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">12</span>],[<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">13</span>],[<span class="number">6</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">15</span>]]</span><br><span class="line"></span><br><span class="line">返回值：<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">说明：不存在<span class="number">3</span>，返回<span class="literal">false</span> </span><br></pre></td></tr></table></figure><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Find</span><span class="params">(target <span class="keyword">int</span>, array [][]<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    row := <span class="built_in">len</span>(array) <span class="comment">//数组的行数</span></span><br><span class="line">    col := <span class="built_in">len</span>(array[<span class="number">0</span>]) <span class="comment">//数组的列数</span></span><br><span class="line">    <span class="keyword">for</span> x, y := <span class="number">0</span>, col - <span class="number">1</span>; x &lt; row &amp;&amp; y &gt;= <span class="number">0</span>; &#123; <span class="comment">//从右上角的点开始遍历</span></span><br><span class="line">        <span class="keyword">if</span> array[x][y] &lt; target &#123; <span class="comment">//比它大的点都在它下边</span></span><br><span class="line">            x ++</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> array[x][y] &gt; target &#123; <span class="comment">//比它小的点都在它左边</span></span><br><span class="line">            y --</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> array[x][y] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;在一个二维数组array中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数</summary>
      
    
    
    
    <category term="《剑指Offer》的Go语言实现" scheme="https://ajiang0704.github.io/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B%E7%9A%84Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    
    
    <category term="剑指Offer" scheme="https://ajiang0704.github.io/tags/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="Golang" scheme="https://ajiang0704.github.io/tags/Golang/"/>
    
    <category term="Go语言" scheme="https://ajiang0704.github.io/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
    <category term="数组" scheme="https://ajiang0704.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>C++实现词法分析程序</title>
    <link href="https://ajiang0704.github.io/2021/05/27/5-C++%E5%AE%9E%E7%8E%B0%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E7%A8%8B%E5%BA%8F/"/>
    <id>https://ajiang0704.github.io/2021/05/27/5-C++%E5%AE%9E%E7%8E%B0%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2025-08-26T06:42:01.869Z</updated>
    
    <content type="html"><![CDATA[<p>词法分析的目的是将输入的源程序进行划分，给出基本符号（<code>token</code>）的序列，并掠过注解和空格等分隔符号。基本符号是与输入的语言定义的词法所规定的终结符。</p><p>本文编制了一个读单词过程。从输入的源程序中，识别出各个具有独立意义的单词，即基本保留字、标识符、常数、运算符、分隔符五大类。并依次输出各个单词的内部编码及单词符号自身值。遇到错误时提示，然后跳过错误部分继续进行。</p><h1 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h1><h2 id="LexicalAnalyzer-cpp"><a href="#LexicalAnalyzer-cpp" class="headerlink" title="LexicalAnalyzer.cpp"></a>LexicalAnalyzer.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> syn = <span class="number">-1</span>;       <span class="comment">//种别码    </span></span><br><span class="line"><span class="keyword">int</span> startp = <span class="number">0</span>;     <span class="comment">//源程序字符数组内的初始指针</span></span><br><span class="line"><span class="keyword">int</span> endp = <span class="number">0</span>;       <span class="comment">//源程序字符数组内的末位指针 </span></span><br><span class="line"><span class="keyword">char</span> rp[<span class="number">100000</span>];    <span class="comment">//即ResourceProject源程序字符数组</span></span><br><span class="line"><span class="keyword">char</span> token[<span class="number">20</span>];     <span class="comment">//存放识别出来的词 </span></span><br><span class="line"><span class="keyword">int</span> ff = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*32个保留字*/</span></span><br><span class="line"><span class="keyword">char</span> reserveWord[<span class="number">32</span>][<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="string">&quot;auto&quot;</span>, <span class="string">&quot;break&quot;</span>, <span class="string">&quot;case&quot;</span>, <span class="string">&quot;char&quot;</span>, <span class="string">&quot;const&quot;</span>, <span class="string">&quot;continue&quot;</span>, <span class="string">&quot;default&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;double&quot;</span>, </span><br><span class="line">    <span class="string">&quot;else&quot;</span>, <span class="string">&quot;enum&quot;</span>, <span class="string">&quot;extern&quot;</span>, <span class="string">&quot;float&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;goto&quot;</span>, <span class="string">&quot;if&quot;</span>, <span class="string">&quot;int&quot;</span>, <span class="string">&quot;long&quot;</span>, <span class="string">&quot;register&quot;</span>, </span><br><span class="line">    <span class="string">&quot;return&quot;</span>, <span class="string">&quot;short&quot;</span>, <span class="string">&quot;signed&quot;</span>, <span class="string">&quot;sizeof&quot;</span>, <span class="string">&quot;static&quot;</span>, <span class="string">&quot;struct&quot;</span>, <span class="string">&quot;switch&quot;</span>, <span class="string">&quot;typedef&quot;</span>, </span><br><span class="line">    <span class="string">&quot;union&quot;</span>, <span class="string">&quot;unsigned&quot;</span>, <span class="string">&quot;void&quot;</span>, <span class="string">&quot;volatile&quot;</span>, <span class="string">&quot;while&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*22个运算符*/</span></span><br><span class="line"><span class="keyword">char</span> operatorWord[<span class="number">22</span>][<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;++&quot;</span>, <span class="string">&quot;--&quot;</span>, <span class="string">&quot;&lt;=&quot;</span>, <span class="string">&quot;&lt;&lt;&quot;</span>, </span><br><span class="line">    <span class="string">&quot;&gt;=&quot;</span>, <span class="string">&quot;&gt;&gt;&quot;</span>, <span class="string">&quot;==&quot;</span>, <span class="string">&quot;!=&quot;</span>, <span class="string">&quot;&amp;&amp;&quot;</span>, <span class="string">&quot;||&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*16个分隔符*/</span></span><br><span class="line"><span class="keyword">char</span> borderWord[<span class="number">16</span>][<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\&#x27;&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;\?&quot;</span>, <span class="string">&quot;:&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*过滤源程序函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Init_Resource</span><span class="params">( <span class="keyword">char</span> rp[] )</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">100000</span>];     <span class="comment">//临时数组 </span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span> ; i &lt; startp ; i ++ ) &#123;</span><br><span class="line">        <span class="comment">//过滤头文件 </span></span><br><span class="line">        <span class="keyword">if</span>( rp[i] == <span class="string">&#x27;#&#x27;</span> &amp;&amp; rp[i + <span class="number">1</span>] == <span class="string">&#x27;i&#x27;</span> &amp;&amp; </span><br><span class="line">            rp[i + <span class="number">2</span>] == <span class="string">&#x27;n&#x27;</span> &amp;&amp; rp[i + <span class="number">3</span>] == <span class="string">&#x27;c&#x27;</span> &amp;&amp; </span><br><span class="line">            rp[i + <span class="number">4</span>] == <span class="string">&#x27;l&#x27;</span> &amp;&amp; rp[i + <span class="number">5</span>] == <span class="string">&#x27;u&#x27;</span> &amp;&amp; </span><br><span class="line">            rp[i + <span class="number">6</span>] == <span class="string">&#x27;d&#x27;</span> &amp;&amp; rp[i + <span class="number">7</span>] == <span class="string">&#x27;e&#x27;</span> ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;头文件: #include&quot;</span> );</span><br><span class="line">            <span class="keyword">while</span>( rp[i] != <span class="string">&#x27;&lt;&#x27;</span> ) &#123;</span><br><span class="line">                i ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>( rp[i] != <span class="string">&#x27;\n&#x27;</span> ) &#123;</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">&quot;%c&quot;</span>, rp[i++] );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;\n&quot;</span> );</span><br><span class="line">        &#125; </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//删除单行注释</span></span><br><span class="line">        <span class="keyword">if</span>( rp[i] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; rp[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span> ) &#123;</span><br><span class="line">            <span class="keyword">while</span>( rp[i] != <span class="string">&#x27;\n&#x27;</span> ) &#123;</span><br><span class="line">                i ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除多行注释</span></span><br><span class="line">        <span class="keyword">if</span>( rp[i] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; rp[i + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> ) &#123;</span><br><span class="line">            <span class="keyword">int</span> flag3 = <span class="number">1</span>;</span><br><span class="line">            i = i + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j = i ; j &lt; startp ; j ++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span>( rp[j] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; rp[j + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span> ) &#123;</span><br><span class="line">                    i = j + <span class="number">2</span>;</span><br><span class="line">                    flag3 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( flag3 == <span class="number">1</span> ) &#123;</span><br><span class="line">                flag2 = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除换行符 制表符</span></span><br><span class="line">        <span class="keyword">if</span>( rp[i] != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; rp[i] != <span class="string">&#x27;\t&#x27;</span> ) &#123;</span><br><span class="line">            temp[count] = rp[i];</span><br><span class="line">            count ++; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    temp[count] =<span class="string">&#x27;$&#x27;</span>;<span class="comment">//末位增加结束符 </span></span><br><span class="line">    <span class="built_in">strcpy</span>( rp, temp );</span><br><span class="line">    <span class="keyword">return</span> count;          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断是否为数字*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsDigit</span><span class="params">( <span class="keyword">char</span> digit )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( digit &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; digit &lt;= <span class="string">&#x27;9&#x27;</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断是否为字母*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsLetter</span><span class="params">( <span class="keyword">char</span> letter )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( ( letter &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; letter &lt;= <span class="string">&#x27;z&#x27;</span> ) || </span><br><span class="line">        ( letter &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; letter &lt;= <span class="string">&#x27;Z&#x27;</span> ) || letter == <span class="string">&#x27;_&#x27;</span> ) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找保留字 种别码1~32*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchReserve</span><span class="params">( <span class="keyword">char</span> reserveWord[][<span class="number">10</span>], <span class="keyword">char</span> s[] )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">strcmp</span>( reserveWord[i], s ) == <span class="number">0</span> ) &#123;</span><br><span class="line">            i ++;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*扫描*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Scaning</span><span class="params">( <span class="keyword">char</span> rp[] )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ch = rp[startp];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//过滤空格</span></span><br><span class="line">    <span class="keyword">while</span>( ch == <span class="string">&#x27; &#x27;</span> ) &#123;</span><br><span class="line">        startp ++;</span><br><span class="line">        ch = rp[startp];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每次收集前先清零</span></span><br><span class="line">    <span class="built_in">memset</span>( token, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(token) );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*查找运算符 种别码33~54*/</span></span><br><span class="line">    <span class="comment">//加+ 减- 乘* 除/ 求余% 小于&lt; 大于&gt; 赋值= 非! 位与&amp; 位或| 位异或^ 33~44</span></span><br><span class="line">    <span class="keyword">if</span>( ch == <span class="string">&#x27;+&#x27;</span> || ch == <span class="string">&#x27;-&#x27;</span> || ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span> || ch == <span class="string">&#x27;%&#x27;</span> || </span><br><span class="line">        ch == <span class="string">&#x27;&lt;&#x27;</span> || ch == <span class="string">&#x27;&gt;&#x27;</span> || ch == <span class="string">&#x27;=&#x27;</span> || ch == <span class="string">&#x27;!&#x27;</span> || ch == <span class="string">&#x27;&amp;&#x27;</span> ||</span><br><span class="line">        ch == <span class="string">&#x27;|&#x27;</span> || ch == <span class="string">&#x27;^&#x27;</span>) &#123;</span><br><span class="line">        token[<span class="number">0</span>] = rp[startp];</span><br><span class="line">        token[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i ++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span>( <span class="built_in">strcmp</span>( token, operatorWord[i] ) == <span class="number">0</span> ) &#123;</span><br><span class="line">                    syn = <span class="number">33</span> + i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;+&#x27;</span> &amp;&amp; rp[startp + <span class="number">1</span>] == <span class="string">&#x27;+&#x27;</span> )        syn = <span class="number">45</span>;   <span class="comment">//自增++ 45</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;-&#x27;</span> &amp;&amp; rp[startp + <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span> )   syn = <span class="number">46</span>;   <span class="comment">//自减-- 46</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;&lt;&#x27;</span> &amp;&amp; rp[startp + <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span> )   syn = <span class="number">47</span>;   <span class="comment">//小于等于&lt;= 47          </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;&lt;&#x27;</span> &amp;&amp; rp[startp + <span class="number">1</span>] == <span class="string">&#x27;&lt;&#x27;</span> )   syn = <span class="number">48</span>;   <span class="comment">//左移&lt;&lt; 48         </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;&gt;&#x27;</span> &amp;&amp; rp[startp + <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span> )   syn = <span class="number">49</span>;   <span class="comment">//大于等于&gt;= 49</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;&gt;&#x27;</span> &amp;&amp; rp[startp + <span class="number">1</span>] == <span class="string">&#x27;&gt;&#x27;</span> )   syn = <span class="number">50</span>;   <span class="comment">//右移&gt;&gt; 50           </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;=&#x27;</span> &amp;&amp; rp[startp + <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span> )   syn = <span class="number">51</span>;   <span class="comment">//等于== 51             </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;!&#x27;</span> &amp;&amp; rp[startp + <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span> )   syn = <span class="number">52</span>;   <span class="comment">//不等于!= 52          </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;&amp;&#x27;</span> &amp;&amp; rp[startp + <span class="number">1</span>] == <span class="string">&#x27;&amp;&#x27;</span> )   syn = <span class="number">53</span>;   <span class="comment">//逻辑与&amp;&amp; 53         </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;|&#x27;</span> &amp;&amp; rp[startp + <span class="number">1</span>] == <span class="string">&#x27;|&#x27;</span> )   syn = <span class="number">54</span>;   <span class="comment">//逻辑或|| 54</span></span><br><span class="line">        <span class="keyword">if</span>( syn &gt;= <span class="number">45</span> &amp;&amp; syn &lt;= <span class="number">54</span> ) startp ++;</span><br><span class="line">        startp ++;</span><br><span class="line">        <span class="keyword">return</span> syn;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*查找分隔符 种别码55~70*/</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( ch == <span class="string">&#x27;(&#x27;</span> || ch == <span class="string">&#x27;)&#x27;</span> || ch == <span class="string">&#x27;[&#x27;</span>  || ch == <span class="string">&#x27;]&#x27;</span>  || ch == <span class="string">&#x27;&#123;&#x27;</span>  || </span><br><span class="line">             ch == <span class="string">&#x27;&#125;&#x27;</span> || ch == <span class="string">&#x27;;&#x27;</span> || ch == <span class="string">&#x27;,&#x27;</span>  || ch == <span class="string">&#x27;\&quot;&#x27;</span> || ch == <span class="string">&#x27;\&#x27;&#x27;</span> ||</span><br><span class="line">             ch == <span class="string">&#x27;#&#x27;</span> || ch == <span class="string">&#x27;~&#x27;</span> || ch == <span class="string">&#x27;\\&#x27;</span> || ch == <span class="string">&#x27;.&#x27;</span>  || ch == <span class="string">&#x27;\?&#x27;</span> ||</span><br><span class="line">             ch == <span class="string">&#x27;:&#x27;</span>) &#123;</span><br><span class="line">        token[<span class="number">0</span>] = rp[startp];</span><br><span class="line">        token[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">0</span> ; i &lt; <span class="number">16</span> ; i ++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( <span class="built_in">strcmp</span>( token, borderWord[i] ) == <span class="number">0</span> ) &#123;</span><br><span class="line">                    syn = <span class="number">55</span> + i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        startp ++;</span><br><span class="line">        <span class="keyword">return</span> syn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*查找字母 即 保留字 种别码1~32 和 标识符 种别码100*/</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( IsLetter(rp[startp]) ) &#123;</span><br><span class="line">            token[count] = rp[startp];</span><br><span class="line">            count ++;</span><br><span class="line">            startp ++;</span><br><span class="line">            <span class="keyword">while</span>( IsLetter(rp[startp]) || IsDigit(rp[startp]) ) &#123;</span><br><span class="line">                token[count++] = rp[startp];</span><br><span class="line">                startp ++;</span><br><span class="line">            &#125;</span><br><span class="line">            token[count] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            syn =  searchReserve( reserveWord, token );</span><br><span class="line">            <span class="keyword">if</span>( syn == <span class="number">-1</span> ) &#123;</span><br><span class="line">                syn = <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> syn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*查找常数 种别码99*/</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( IsDigit(rp[startp])) &#123;</span><br><span class="line">        ff = <span class="number">0</span>; </span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>( IsDigit(rp[startp]) || rp[startp] == <span class="string">&#x27;.&#x27;</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;.&#x27;</span> ) flag ++;</span><br><span class="line">            <span class="keyword">if</span>( IsLetter(rp[startp + <span class="number">1</span>]) ) &#123;</span><br><span class="line">                token[count] = rp[startp];</span><br><span class="line">                startp ++, count ++;</span><br><span class="line">                <span class="keyword">while</span>( IsLetter(rp[startp]) ) &#123;</span><br><span class="line">                    token[count] = rp[startp];</span><br><span class="line">                    startp ++, count ++;</span><br><span class="line">                &#125; </span><br><span class="line">                ff = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            token[count] = rp[startp];</span><br><span class="line">            count ++;</span><br><span class="line">            startp ++;</span><br><span class="line">            syn = <span class="number">99</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        token[count] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> syn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找结束符</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( rp[startp] == <span class="string">&#x27;$&#x27;</span> ) &#123;     </span><br><span class="line">        syn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> syn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误输出</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;错误: %c , 非法字符\n&quot;</span>, ch );</span><br><span class="line">        startp ++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取源程序</span></span><br><span class="line">    <span class="built_in">memset</span>( token, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(token) );</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">if</span>( ( fp = fopen ( <span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;r&quot;</span> ) ) == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;未找到源程序文档data.txt！&quot;</span> );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将源程序读入rp数组</span></span><br><span class="line">    rp[startp] = fgetc(fp);</span><br><span class="line">    <span class="keyword">while</span>( rp[startp] != EOF ) &#123;</span><br><span class="line">        startp ++;</span><br><span class="line">        rp[startp] = fgetc(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    endp = Init_Resource(rp);</span><br><span class="line">    startp = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>( syn != <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">//扫描</span></span><br><span class="line">        syn = Scaning(rp);</span><br><span class="line">        <span class="keyword">if</span>( syn == <span class="number">100</span> ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;&lt; %s , %d , 标识符 &gt;\n&quot;</span>, token, syn );</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( syn == <span class="number">99</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span>( !ff &amp;&amp; flag &lt;= <span class="number">1</span> ) &#123;</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">&quot;&lt; %s , %d , 常数 &gt;\n&quot;</span>, token, syn );</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( ff ) &#123;</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">&quot;错误：%s , 不合法的常数或标识符\n&quot;</span>, token );</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">&quot;错误：%s , 含有多个小数点\n&quot;</span>, token );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( syn &gt;= <span class="number">1</span> &amp;&amp; syn &lt;= <span class="number">32</span> ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;&lt; %s , %d , 保留字 &gt;\n&quot;</span>, reserveWord[syn - <span class="number">1</span>], syn );</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( syn &gt;= <span class="number">33</span> &amp;&amp; syn &lt;= <span class="number">54</span> ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;&lt; %s , %d , 运算符 &gt;\n&quot;</span>, operatorWord[syn - <span class="number">33</span>], syn );</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( syn &gt;= <span class="number">55</span> &amp;&amp; syn &lt;= <span class="number">70</span> ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;&lt; %s , %d , 分隔符 &gt;\n&quot;</span>, borderWord[syn - <span class="number">55</span>], syn );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( flag2 == <span class="number">1</span> )&#123;</span><br><span class="line">       <span class="built_in">printf</span>( <span class="string">&quot;错误：多行注释未闭合\n&quot;</span> );  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;扫描结束！&quot;</span> );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><table><thead><tr><th align="center">自身值</th><th align="center">种别编码</th></tr></thead><tbody><tr><td align="center">auto(key)</td><td align="center">1</td></tr><tr><td align="center">break(key)</td><td align="center">2</td></tr><tr><td align="center">case(key)</td><td align="center">3</td></tr><tr><td align="center">char(key)</td><td align="center">4</td></tr><tr><td align="center">const(key)</td><td align="center">5</td></tr><tr><td align="center">continue(key)</td><td align="center">6</td></tr><tr><td align="center">default(key)</td><td align="center">7</td></tr><tr><td align="center">do(key)</td><td align="center">8</td></tr><tr><td align="center">double(key)</td><td align="center">9</td></tr><tr><td align="center">else(key)</td><td align="center">10</td></tr><tr><td align="center">enum(key)</td><td align="center">11</td></tr><tr><td align="center">extern(key)</td><td align="center">12</td></tr><tr><td align="center">float(key)</td><td align="center">13</td></tr><tr><td align="center">for(key)</td><td align="center">14</td></tr><tr><td align="center">goto(key)</td><td align="center">15</td></tr><tr><td align="center">if(key)</td><td align="center">16</td></tr><tr><td align="center">int(key)</td><td align="center">17</td></tr><tr><td align="center">long(key)</td><td align="center">18</td></tr><tr><td align="center">register(key)</td><td align="center">19</td></tr><tr><td align="center">return(key)</td><td align="center">20</td></tr><tr><td align="center">short(key)</td><td align="center">21</td></tr><tr><td align="center">signed(key)</td><td align="center">22</td></tr><tr><td align="center">sizeof(key)</td><td align="center">23</td></tr><tr><td align="center">static(key)</td><td align="center">24</td></tr><tr><td align="center">struct(key)</td><td align="center">25</td></tr><tr><td align="center">switch(key)</td><td align="center">26</td></tr><tr><td align="center">typedef(key)</td><td align="center">27</td></tr><tr><td align="center">union(key)</td><td align="center">28</td></tr><tr><td align="center">unsigned(key)</td><td align="center">29</td></tr><tr><td align="center">void(key)</td><td align="center">30</td></tr><tr><td align="center">volatile(key)</td><td align="center">31</td></tr><tr><td align="center">while(key)</td><td align="center">32</td></tr></tbody></table><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th align="center">自身值</th><th align="center">种别编码</th></tr></thead><tbody><tr><td align="center">+(op)</td><td align="center">33</td></tr><tr><td align="center">-(op)</td><td align="center">34</td></tr><tr><td align="center">*(op)</td><td align="center">35</td></tr><tr><td align="center">/(op)</td><td align="center">36</td></tr><tr><td align="center">%(op)</td><td align="center">37</td></tr><tr><td align="center">&lt;(relop)</td><td align="center">38</td></tr><tr><td align="center">&gt;(relop)</td><td align="center">39</td></tr><tr><td align="center">=(assign)</td><td align="center">40</td></tr><tr><td align="center">!(logop)</td><td align="center">41</td></tr><tr><td align="center">&amp;(logop)</td><td align="center">42</td></tr><tr><td align="center">(logop)</td><td align="center">43</td></tr><tr><td align="center">^(logop)</td><td align="center">44</td></tr><tr><td align="center">++(op)</td><td align="center">45</td></tr><tr><td align="center">–(op)</td><td align="center">46</td></tr><tr><td align="center">&lt;=(relop)</td><td align="center">47</td></tr><tr><td align="center">&lt;&lt;(logop)</td><td align="center">48</td></tr><tr><td align="center">&gt;=(relop)</td><td align="center">49</td></tr><tr><td align="center">&gt;&gt;(logop)</td><td align="center">50</td></tr><tr><td align="center">==(relop)</td><td align="center">51</td></tr><tr><td align="center">!=(relop)</td><td align="center">52</td></tr><tr><td align="center">&amp;&amp;(logop)</td><td align="center">53</td></tr><tr><td align="center">||(logop)</td><td align="center">54</td></tr></tbody></table><h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><p><code>op</code>     ： 算术运算符</p><p><code>relop</code>  ： 关系运算符</p><p><code>logop</code>  ： 逻辑运算符和位操作运算符</p><p><code>assign</code> ： 赋值运算符</p><h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><table><thead><tr><th align="center">自身值</th><th align="center">种别编码</th></tr></thead><tbody><tr><td align="center">((deli)</td><td align="center">55</td></tr><tr><td align="center">)(deli)</td><td align="center">56</td></tr><tr><td align="center">[(deli)</td><td align="center">57</td></tr><tr><td align="center">](deli)</td><td align="center">58</td></tr><tr><td align="center">{(deli)</td><td align="center">59</td></tr><tr><td align="center">}(deli)</td><td align="center">60</td></tr><tr><td align="center">;(deli)</td><td align="center">61</td></tr><tr><td align="center">,(deli)</td><td align="center">62</td></tr><tr><td align="center">“(deli)</td><td align="center">63</td></tr><tr><td align="center">‘(deli)</td><td align="center">64</td></tr><tr><td align="center">#(deli)</td><td align="center">65</td></tr><tr><td align="center">~(deli)</td><td align="center">66</td></tr><tr><td align="center">(deli)</td><td align="center">67</td></tr><tr><td align="center">.(deli)</td><td align="center">68</td></tr><tr><td align="center">?(deli)</td><td align="center">69</td></tr><tr><td align="center">:(deli)</td><td align="center">70</td></tr></tbody></table><h2 id="常数"><a href="#常数" class="headerlink" title="常数"></a>常数</h2><table><thead><tr><th align="center">自身值</th><th align="center">种别编码</th></tr></thead><tbody><tr><td align="center">&lt;常数&gt;(num)</td><td align="center">99</td></tr></tbody></table><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><table><thead><tr><th align="center">自身值</th><th align="center">种别编码</th></tr></thead><tbody><tr><td align="center">&lt;标识符&gt;(id)</td><td align="center">100</td></tr></tbody></table><h1 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h1><h2 id="data-txt"><a href="#data-txt" class="headerlink" title="data.txt"></a>data.txt</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">include&lt;bitset&gt;</span></span><br><span class="line">//单行注释</span><br><span class="line">float a = 0.6, 1b = 0.3;</span><br><span class="line">float a_b = a/b + 1.5.5; @</span><br><span class="line">float a_b1 = (100 + 1.8a ) * a;</span><br><span class="line">/*闭合的多行注释*/</span><br><span class="line">unsigned short short2 = short1 &lt;&lt; 1;</span><br><span class="line">/*未闭合的多行注释</span><br><span class="line">unsigned short short3 = short1 &gt;&gt; 1;</span><br></pre></td></tr></table></figure><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><img src="https://free.picui.cn/free/2025/08/26/68ad5709dfc99.png" alt="测试结果" style="zoom: 90%;" /><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;词法分析的目的是将输入的源程序进行划分，给出基本符号（&lt;code&gt;token&lt;/code&gt;）的序列，并掠过注解和空格等分隔符号。基本符号是与输入的语言定义的词法所规定的终结符。&lt;/p&gt;
&lt;p&gt;本文编制了一个读单词过程。从输入的源程序中，识别出各个具有独立意义的单词，即基本保</summary>
      
    
    
    
    <category term="C＋＋学习笔记" scheme="https://ajiang0704.github.io/categories/C%EF%BC%8B%EF%BC%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://ajiang0704.github.io/tags/C/"/>
    
    <category term="编译原理" scheme="https://ajiang0704.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>从零开始部署k8s集群</title>
    <link href="https://ajiang0704.github.io/2021/05/22/4-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2k8s%E9%9B%86%E7%BE%A4/"/>
    <id>https://ajiang0704.github.io/2021/05/22/4-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2k8s%E9%9B%86%E7%BE%A4/</id>
    <published>2021-05-21T16:00:00.000Z</published>
    <updated>2025-08-26T06:38:49.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K8S简介"><a href="#K8S简介" class="headerlink" title="K8S简介"></a>K8S简介</h1><div style = "text-indent:2em;"><p><code>Kubernetes</code> 是一个开源的容器群集管理系统，简称 <code>K8S</code> 。它用于容器化应用程序的部署，管理及扩展。</p></div><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul><li><p><strong>自动化</strong></p><p>自动部署，自动重启，自动复制，自动扩容、自动更新、自动伸缩/扩展、自动化管理资源</p></li><li><p><strong>可移植</strong></p><p>支持公有云，私有云，混合云，多重云</p></li><li><p><strong>可扩展</strong></p><p>模块化、插件化、可挂载、可组合</p></li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="Master组件"><a href="#Master组件" class="headerlink" title="Master组件"></a>Master组件</h3><ul><li><p><strong>kube-apiserver</strong></p><p><code>Kubernetes API</code> ，集群统一入口，各组件协调者，以 <code>RESTful API</code> 提供接口服务，所有对象的资源的增删改查和监听操作都交给 <code>APIServer</code> 处理后再提交给 <code>Etcd</code> 存储。</p></li><li><p><strong>kube-controller-manager</strong></p><p>处理集群中常规的后台任务，一个资源对应一个控制器，而 <code>ControllerManager</code> 就是负责管理这些控制器的。</p></li><li><p><strong>kube-scheduler</strong></p><p>根据调度算法为新创建的 <code>Pod</code> 选择一个 <code>node</code> 节点，可以部署在同一个节点上，也可以部署在不同节点上。</p></li><li><p><strong>etcd</strong></p><p>分布式键值存储系统，用于保存群集状态数据，比如 <code>Pod</code> 、 <code>service</code> 等对象信息。</p></li></ul><h3 id="Node组件"><a href="#Node组件" class="headerlink" title="Node组件"></a>Node组件</h3><ul><li><p><strong>kubelet</strong></p><p><code>kubelet</code> 是 <code>Master</code> 在 <code>Node</code> 节点上的 <code>Agent</code> ，管理本机运行容器的生命周期，比如创建容器、 <code>Pod</code> 挂载数据卷、下载 <code>Secret</code> 、获取容器节点状态工作。 <code>kubelet</code> 将每个 <code>Pod</code> 转换成一组容器。</p></li><li><p><strong>kube-proxy</strong></p><p>在 <code>node</code> 节点上实现 <code>Pod</code> 网络代理，维护网络规则和四层负载均衡工作。</p></li><li><p><strong>docker</strong></p><p>容器引擎，运行容器。</p></li></ul><h1 id="K8S集群部署"><a href="#K8S集群部署" class="headerlink" title="K8S集群部署"></a>K8S集群部署</h1><h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><ul><li><strong>OS</strong>：一台2核2G内存的阿里云轻量应用服务器，一台 <code>VMware</code> 虚拟机，操作系统都为 <code>Ubuntu16.04</code> 。</li></ul><img src="https://free.picui.cn/free/2025/08/26/68ad55400e440.jpg" alt="OS" style="zoom: 70%;" /><ul><li><strong>Docker</strong>：20.10.6</li></ul><p><img src="https://free.picui.cn/free/2025/08/26/68ad554003090.jpg" alt="Docker"></p><ul><li><strong>K8s</strong>：v1.21.1</li></ul><p><img src="https://free.picui.cn/free/2025/08/26/68ad553fe4365.jpg" alt="K8s"></p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更新一下apt包索引</span></span><br><span class="line">sudo apt<span class="literal">-get</span> update</span><br><span class="line"><span class="comment">#使apt可以通过HTTPS使用存储库</span></span><br><span class="line">sudo apt<span class="literal">-get</span> install <span class="literal">-y</span> apt<span class="literal">-transport</span><span class="literal">-https</span> ca<span class="literal">-certificates</span> <span class="built_in">curl</span> software<span class="literal">-properties</span><span class="literal">-common</span></span><br><span class="line"><span class="comment">#添加Docker官方的GPG密钥</span></span><br><span class="line"><span class="built_in">curl</span> <span class="literal">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | sudo apt<span class="literal">-key</span> add -</span><br><span class="line"><span class="comment">#设置stable存储库</span></span><br><span class="line">sudo <span class="built_in">add-apt</span><span class="literal">-repository</span> <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="variable">$</span>(lsb_release -cs) stable&quot;</span></span><br><span class="line"><span class="comment">#再更新一下apt包索引</span></span><br><span class="line">sudo apt<span class="literal">-get</span> update</span><br><span class="line"><span class="comment">#安装最新版本的Docker CE</span></span><br><span class="line">sudo apt<span class="literal">-get</span> install <span class="literal">-y</span> docker<span class="literal">-ce</span></span><br><span class="line"><span class="comment">#验证docker</span></span><br><span class="line">sudo docker run hello<span class="literal">-world</span></span><br></pre></td></tr></table></figure><h3 id="安装kubelet-kubeadm-kubectl（阿里源）"><a href="#安装kubelet-kubeadm-kubectl（阿里源）" class="headerlink" title="安装kubelet kubeadm kubectl（阿里源）"></a>安装kubelet kubeadm kubectl（阿里源）</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt<span class="literal">-get</span> update &amp;&amp; apt<span class="literal">-get</span> install <span class="literal">-y</span> apt<span class="literal">-transport</span><span class="literal">-https</span></span><br><span class="line"><span class="comment"># 加载key</span></span><br><span class="line">sudo <span class="built_in">curl</span> https://mirrors.aliyun.com/kubernetes/apt/doc/apt<span class="literal">-key</span>.gpg | apt<span class="literal">-key</span> add - </span><br><span class="line"><span class="comment"># 添加源</span></span><br><span class="line">sudo <span class="built_in">cat</span> &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes<span class="literal">-xenial</span> main</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt<span class="literal">-get</span> update</span><br><span class="line">sudo apt<span class="literal">-get</span> install <span class="literal">-y</span> kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><h3 id="关闭swap"><a href="#关闭swap" class="headerlink" title="关闭swap"></a>关闭swap</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#临时关闭swap（立即生效）</span></span><br><span class="line">sudo swapoff <span class="literal">-a</span></span><br><span class="line"><span class="comment">#永久关闭swap</span></span><br><span class="line">vim /etc/fstab</span><br><span class="line"><span class="comment">#打开fstab文件，注释掉有swap的那一行，然后保存</span></span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld &amp; systemctl disable firewalld</span><br></pre></td></tr></table></figure><h3 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;s/^SELINUX=/SELINUX=disabled/&quot;</span> /etc/selinux/config</span><br><span class="line">setenforce <span class="number">0</span> </span><br></pre></td></tr></table></figure><h3 id="修改cgroupfs"><a href="#修改cgroupfs" class="headerlink" title="修改cgroupfs"></a>修改cgroupfs</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/kubelet.service.d/<span class="number">10</span><span class="literal">-kubeadm</span>.conf</span><br><span class="line"><span class="comment">#增加--cgroup-driver=cgroupfs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启kubelet</span></span><br><span class="line">sudo systemctl daemon<span class="literal">-reload</span></span><br><span class="line">sudo systemctl restart kubelet </span><br></pre></td></tr></table></figure><h3 id="查看Master需要安装的镜像列表"><a href="#查看Master需要安装的镜像列表" class="headerlink" title="查看Master需要安装的镜像列表"></a>查看Master需要安装的镜像列表</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">kubeadm config images list</span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/08/26/68ad553fe4824.jpg" alt="list"></p><h3 id="下拉镜像脚本"><a href="#下拉镜像脚本" class="headerlink" title="下拉镜像脚本"></a>下拉镜像脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">images=(</span><br><span class="line">kube-apiserver:v1.21.1</span><br><span class="line">kube-controller-manager:v1.21.1</span><br><span class="line">kube-scheduler:v1.21.1</span><br><span class="line">kube-proxy:v1.21.1</span><br><span class="line">pause:3.4.1</span><br><span class="line">etcd:3.4.13-0</span><br><span class="line">coredns/coredns:v1.8.0</span><br><span class="line">)</span><br><span class="line">for imageName in $&#123;images[@]&#125;;</span><br><span class="line">do</span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$&#123;imageName&#125;</span><br><span class="line">    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$&#123;imageName&#125; k8s.gcr.io/$&#123;imageName&#125;</span><br><span class="line">    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$&#123;imageName&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="安装flannel（node上也要安装）"><a href="#安装flannel（node上也要安装）" class="headerlink" title="安装flannel（node上也要安装）"></a>安装flannel（node上也要安装）</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wget</span> https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube<span class="literal">-flannel</span>.yml</span><br><span class="line"><span class="comment"># 修改docker镜像地址</span></span><br><span class="line">sed <span class="string">&#x27;s/quay.io\/coreos/registry.cn-hangzhou.aliyuncs.com\/imcto/g&#x27;</span></span><br><span class="line"><span class="comment"># 安装flannel</span></span><br><span class="line">sudo kubectl apply <span class="operator">-f</span> kube<span class="literal">-flannel</span>.yml</span><br></pre></td></tr></table></figure><h3 id="初始化k8s集群"><a href="#初始化k8s集群" class="headerlink" title="初始化k8s集群"></a>初始化k8s集群</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">kubeadm init</span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/08/26/68ad553fabf75.jpg" alt="init"></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据提示输入命令</span></span><br><span class="line">mkdir <span class="literal">-p</span> <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> <span class="literal">-i</span> /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown <span class="variable">$</span>(id <span class="literal">-u</span>):<span class="variable">$</span>(id <span class="literal">-g</span>) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="comment">#将提示给的最后一行jion命令（token）记下来，然后在node节点执行</span></span><br><span class="line">kubeadm join <span class="number">121.41</span>.<span class="number">164.172</span>:<span class="number">6443</span> -<span class="literal">-token</span> abcdef.<span class="number">0123456789</span>abcdef -<span class="literal">-discovery</span><span class="literal">-token</span><span class="literal">-ca</span><span class="literal">-cert</span><span class="literal">-hash</span> sha256:b73d642a2deb12fcf40adf1f1eec1fad72ff9d892be78cd6854c456f11e1eae2</span><br></pre></td></tr></table></figure><h3 id="Node需要安装的镜像列表（和Master一致）"><a href="#Node需要安装的镜像列表（和Master一致）" class="headerlink" title="Node需要安装的镜像列表（和Master一致）"></a>Node需要安装的镜像列表（和Master一致）</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">kube<span class="literal">-proxy</span>:v1.<span class="number">21.1</span></span><br><span class="line">pause:<span class="number">3.4</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="下拉镜像脚本-1"><a href="#下拉镜像脚本-1" class="headerlink" title="下拉镜像脚本"></a>下拉镜像脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">images=(</span><br><span class="line">kube-proxy:v1.21.1</span><br><span class="line">pause:3.4.1</span><br><span class="line">)</span><br><span class="line">for imageName in $&#123;images[@]&#125;;</span><br><span class="line">do</span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$&#123;imageName&#125;</span><br><span class="line">    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$&#123;imageName&#125; k8s.gcr.io/$&#123;imageName&#125;</span><br><span class="line">    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$&#123;imageName&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="执行node节点加入集群命令"><a href="#执行node节点加入集群命令" class="headerlink" title="执行node节点加入集群命令"></a>执行node节点加入集群命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重置node节点</span></span><br><span class="line">kubeadm reset</span><br><span class="line"><span class="comment">#执行之前记下来的join命令</span></span><br><span class="line">kubeadm join <span class="number">121.41</span>.<span class="number">164.172</span>:<span class="number">6443</span> -<span class="literal">-token</span> abcdef.<span class="number">0123456789</span>abcdef -<span class="literal">-discovery</span><span class="literal">-token</span><span class="literal">-ca</span><span class="literal">-cert</span><span class="literal">-hash</span> sha256:b73d642a2deb12fcf40adf1f1eec1fad72ff9d892be78cd6854c456f11e1eae2</span><br></pre></td></tr></table></figure><h2 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h2><h3 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">kubectl get pods <span class="literal">-n</span> kube<span class="literal">-system</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>主机名</th><th>系统</th><th>IP地址</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master</td><td>Ubuntu 16.04</td><td>121.41.164.172</td><td>master</td></tr><tr><td>k8s-node</td><td>Ubuntu 16.04</td><td>218.85.157.99</td><td>node</td></tr></tbody></table><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><ul><li><p>mater的硬件分配至少2核2G内存。一开始我的服务器只有1G内存，报错 <code>preflight[ERROR Mem]: the system RAM (936 MB) is less than the minimum 1700 MB</code> 。升级为2G内存后问题解决。</p></li><li><p><code>coredns</code> 镜像国内阿里云获取不到，需要在服务器上科学上网，或者让服务器从本地计算机走代理科学上网，或者也可以想办法把镜像（不止 <code>coredns</code> ）弄到阿里云，拉取到本地之后改 <code>tag</code> 。</p></li></ul><ul><li>使用 <code>apt</code> 安装 <code>docker</code> 报错 <code>gpg: 找不到有效的 OpenPGP 数据</code> 。解决方案是将其拆分:</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#原命令</span></span><br><span class="line"><span class="comment">#$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拆分后的命令</span></span><br><span class="line"><span class="built_in">wget</span> https://download.docker.com/linux/ubuntu/gpg</span><br><span class="line">sudo apt<span class="literal">-key</span> add gpg</span><br></pre></td></tr></table></figure><ul><li>执行 <code>sudo apt-get update</code> 报错 <code>W: GPG 错误：http: //ppa.launchpad.net precise Release: 由于没有公钥，无法验证下列签名： NO_PUBKEY 6AF0E1940624A220</code> 。解决方案:</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-key</span> adv -<span class="literal">-keyserver</span> keyserver.ubuntu.com -<span class="literal">-recv</span><span class="literal">-keys</span> <span class="number">6</span>AF0E1940624A220</span><br></pre></td></tr></table></figure><ul><li>初始化报错 <code>[ERROR KubeletVersion]：kubelet版本高于控制平面版本</code>。 <code>Kubeadm</code> 、 <code>Kubectl</code> 和 <code>Kubelet</code> 的版本应该都一致。解决方法是指定控制平面版本:</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo kubeadm init -<span class="literal">-pod</span><span class="literal">-network</span><span class="literal">-cidr</span> = <span class="number">121.41</span>.<span class="number">164.172</span>/<span class="number">12</span> -<span class="literal">-kubernetes</span><span class="literal">-version</span> = v1.<span class="number">21.1</span><span class="literal">-rc</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;K8S简介&quot;&gt;&lt;a href=&quot;#K8S简介&quot; class=&quot;headerlink&quot; title=&quot;K8S简介&quot;&gt;&lt;/a&gt;K8S简介&lt;/h1&gt;&lt;div style = &quot;text-indent:2em;&quot;&gt;

&lt;p&gt;&lt;code&gt;Kubernetes&lt;/code&gt; </summary>
      
    
    
    
    <category term="技术杂谈" scheme="https://ajiang0704.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="Linux" scheme="https://ajiang0704.github.io/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://ajiang0704.github.io/tags/Ubuntu/"/>
    
    <category term="Docker" scheme="https://ajiang0704.github.io/tags/Docker/"/>
    
    <category term="k8s" scheme="https://ajiang0704.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>容器相关概念</title>
    <link href="https://ajiang0704.github.io/2021/03/26/3-%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
    <id>https://ajiang0704.github.io/2021/03/26/3-%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</id>
    <published>2021-03-25T16:00:00.000Z</published>
    <updated>2024-09-10T13:35:48.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><p>微服务（<code>Microservices</code>）是一种软件架构风格，它是以专注于单一责任与功能的小型功能区块为基础，利用模块化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关的 <code>API</code> 集相互通信。</p><h2 id="优"><a href="#优" class="headerlink" title="优"></a>优</h2><p><strong>服务器的独立部署，耦合性底</strong></p><p><strong>服务的快速启动，因为依赖的库少了，代码量也少了</strong></p><p><strong>更加适合敏捷开发</strong></p><p><strong>职责专一，由专门的团队负责专门的服务</strong></p><p><strong>服务可以动态按需扩容</strong></p><p><strong>代码的复用，每个服务都提供 <code>REST</code> 、 <code>API</code></strong></p><h2 id="劣"><a href="#劣" class="headerlink" title="劣"></a>劣</h2><p><strong>分布式部署，调用的复杂性高</strong></p><p><strong>独立的数据库，分布式事务的挑战</strong></p><p><strong>测试的难度提升，<code>API</code> 文档的管理尤为重要</strong></p><p><strong>运维难度的提升</strong></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><strong>基于主机（物理机或虚拟机）的多服务实例</strong></p><p><strong>基于主机（物理机或虚拟机）的服务实例 基于单个虚拟机、单个容器</strong></p><p><strong>基于容器的服务实例</strong></p><p>将服务打包成一个文件系统类型的镜像（容器镜像），其中包含执行该服务所需的应用程序及其库文件，完成打包后，启动一到多个容器，并在物理或虚拟机上运行它们。</p><p><strong>无服务器部署</strong></p><h1 id="容器Docker"><a href="#容器Docker" class="headerlink" title="容器Docker"></a>容器Docker</h1><p>镜像是构建 <code>Docker</code> 的基石，容器是基于镜像启动起来的。镜像是 <code>Docker</code> 生命周期中的构建或者打包阶段，而容器则是启动或执行阶段。</p><h1 id="在Ubuntu上搭建Docker环境并实现基本操作"><a href="#在Ubuntu上搭建Docker环境并实现基本操作" class="headerlink" title="在Ubuntu上搭建Docker环境并实现基本操作"></a>在Ubuntu上搭建Docker环境并实现基本操作</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">curl</span> <span class="literal">-fsSL</span> https://get.docker.com | bash <span class="literal">-s</span> docker -<span class="literal">-mirror</span> Aliyun <span class="comment">#官方安装脚本</span></span><br></pre></td></tr></table></figure><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker iamges  </span><br></pre></td></tr></table></figure><h3 id="查看镜像详细信息"><a href="#查看镜像详细信息" class="headerlink" title="查看镜像详细信息"></a>查看镜像详细信息</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker inspect</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker rmi</span><br></pre></td></tr></table></figure><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-itd</span> -<span class="literal">-name</span>=container_name image_name</span><br></pre></td></tr></table></figure><p>其中 <code>container_name</code> 是自定义的容器名称，<code>image_name</code> 是镜像名称。</p><h3 id="查询容器"><a href="#查询容器" class="headerlink" title="查询容器"></a>查询容器</h3><h4 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">ps</span> </span><br></pre></td></tr></table></figure><h4 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span></span><br></pre></td></tr></table></figure><h3 id="修改容器"><a href="#修改容器" class="headerlink" title="修改容器"></a>修改容器</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker commit</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span>  </span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker pull xxx/xxx </span><br></pre></td></tr></table></figure><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker push xxx/xxx </span><br></pre></td></tr></table></figure><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微服务&quot;&gt;&lt;a href=&quot;#微服务&quot; class=&quot;headerlink&quot; title=&quot;微服务&quot;&gt;&lt;/a&gt;微服务&lt;/h1&gt;&lt;p&gt;微服务（&lt;code&gt;Microservices&lt;/code&gt;）是一种软件架构风格，它是以专注于单一责任与功能的小型功能区块为基础，利</summary>
      
    
    
    
    <category term="技术杂谈" scheme="https://ajiang0704.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="Linux" scheme="https://ajiang0704.github.io/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://ajiang0704.github.io/tags/Ubuntu/"/>
    
    <category term="Docker" scheme="https://ajiang0704.github.io/tags/Docker/"/>
    
    <category term="微服务" scheme="https://ajiang0704.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Go语言的Slice</title>
    <link href="https://ajiang0704.github.io/2019/09/30/2-Go%E8%AF%AD%E8%A8%80%E7%9A%84Slice/"/>
    <id>https://ajiang0704.github.io/2019/09/30/2-Go%E8%AF%AD%E8%A8%80%E7%9A%84Slice/</id>
    <published>2019-09-29T16:00:00.000Z</published>
    <updated>2024-09-09T15:22:57.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Slice"><a href="#初识Slice" class="headerlink" title="初识Slice"></a>初识Slice</h1><p>切片(<code>Slice</code>)是围绕动态数组的概念设计的，它的长度并不固定，可以追加元素并会在切片容量不足时进行扩容。使用这种结构，可以更方便地管理和使用数据集合。</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">s := arr[<span class="number">2</span>:<span class="number">6</span>]  <span class="comment">//s的值为[2,3,4,5]</span></span><br><span class="line">s := arr[:<span class="number">6</span>]   <span class="comment">//s的值为[0,1,2,3,4,5]</span></span><br><span class="line">s := arr[<span class="number">2</span>:]   <span class="comment">//s的值为[2,3,4,5,6,7]</span></span><br><span class="line">s := arr[:]    <span class="comment">//s的值为[0,1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateSlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">100</span> <span class="comment">//arr原始数据也会改变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Slice</code> 本身没有数据，是对底层 <code>array</code> 的一个 <code>view</code>。</p><h1 id="Slice的扩展"><a href="#Slice的扩展" class="headerlink" title="Slice的扩展"></a>Slice的扩展</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">s1 := arr[<span class="number">2</span>:<span class="number">6</span>] <span class="comment">//s1的值为[2,3,4,5]</span></span><br><span class="line">s2 := s1[<span class="number">3</span>:<span class="number">5</span>]  <span class="comment">//s2的值为[5,6]</span></span><br></pre></td></tr></table></figure><p><code>Slice</code> 可以向后扩展，但不可以向前扩展。</p><h1 id="向Slice添加元素"><a href="#向Slice添加元素" class="headerlink" title="向Slice添加元素"></a>向Slice添加元素</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">s2 := <span class="built_in">append</span>(s1,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>添加元素时如果超越 <code>cap</code>，系统会重新分配更大的底层数组（如果原来的数组不用了，会被垃圾回收掉）。</p><h1 id="创建Slice"><a href="#创建Slice" class="headerlink" title="创建Slice"></a>创建Slice</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Creating slice</span></span><br><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i :=<span class="number">0</span> ; i &lt; <span class="number">100</span> ; i++&#123;</span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="number">2</span> * i + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">16</span>)</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">10</span>,<span class="number">32</span>) <span class="comment">//len = 10，cap = 32</span></span><br></pre></td></tr></table></figure><h1 id="拷贝Slice"><a href="#拷贝Slice" class="headerlink" title="拷贝Slice"></a>拷贝Slice</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Copying slice</span></span><br><span class="line"><span class="built_in">copy</span>(s2,s1)</span><br><span class="line">printSlice(s2)</span><br></pre></td></tr></table></figure><h1 id="从Slice删除元素"><a href="#从Slice删除元素" class="headerlink" title="从Slice删除元素"></a>从Slice删除元素</h1><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Deleting elements from slice</span></span><br><span class="line">s = <span class="built_in">append</span>(s[:<span class="number">3</span>],s[<span class="number">4</span>:]...) <span class="comment">//删掉第4个元素，len减1，cap不变</span></span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Popping from front</span></span><br><span class="line"><span class="comment">//front := s[0]</span></span><br><span class="line">s = s[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Popping from back</span></span><br><span class="line"><span class="comment">//tail := s[len(s)-1]</span></span><br><span class="line">s = <span class="built_in">append</span>(:<span class="built_in">len</span>(s)<span class="number">-1</span>) </span><br></pre></td></tr></table></figure><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识Slice&quot;&gt;&lt;a href=&quot;#初识Slice&quot; class=&quot;headerlink&quot; title=&quot;初识Slice&quot;&gt;&lt;/a&gt;初识Slice&lt;/h1&gt;&lt;p&gt;切片(&lt;code&gt;Slice&lt;/code&gt;)是围绕动态数组的概念设计的，它的长度并不固定，可以追加元</summary>
      
    
    
    
    <category term="Go语言学习笔记" scheme="https://ajiang0704.github.io/categories/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Golang" scheme="https://ajiang0704.github.io/tags/Golang/"/>
    
    <category term="Go语言" scheme="https://ajiang0704.github.io/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>我的长安</title>
    <link href="https://ajiang0704.github.io/2017/11/11/1-%E6%88%91%E7%9A%84%E9%95%BF%E5%AE%89/"/>
    <id>https://ajiang0704.github.io/2017/11/11/1-%E6%88%91%E7%9A%84%E9%95%BF%E5%AE%89/</id>
    <published>2017-11-10T16:00:00.000Z</published>
    <updated>2025-08-25T13:01:55.469Z</updated>
    
    <content type="html"><![CDATA[<div style="font-family:楷体;"><p style="font-size:17px;">这篇文章其实是我高中时代的随心之作，就这么丢了太可惜，故在博客做一留存。</p><p style="font-size:17px;" align="right">——写在前面</p></div><h2 align="center">一</h2><p>离进站口只有几步之遥的时候，我爸终于忍不住开始骂我。我妹牵着我爸的手东张西望，看起来仍旧神采奕奕。昏黄的月亮，稀薄的灯光，我爸不怎么黑的头发，我妹活蹦乱跳的神情，构成了这场远行的全部起点。</p><p>我想着李白背上诗囊辞别亲友仗剑长安的模样，想着这个被无数人爱过恨过描摹过的长安，我想起自己是如何地任性执拗且强作放达，想起我爸，原来也是一样地强作放达。我原来是继承了他的秉性。</p><p>你甭瞧活佛济公摇着破扇子拎着破葫芦唱“命里有时终须有，命里无时莫强求”的时候多么潇洒快意，失了法力，他是个屁。哪里有那么多的降龙罗汉好当，凡人谁不得承受怨憎会爱别离。</p><h2 align="center">二</h2><p>萌萌姐很温柔地告诉我从小旅馆到政法大学应该走哪条道，哪个路口的公交车站牌最多，哪个地方的建筑全是新建的毫无古韵可言，哪个地方一定要去一去。小旅馆的电视机里蓝琪儿格格正哭天抹泪地求着她祖母，希望祖母跟皇上求求情，别把她嫁到蒙古去。然而孝庄太后说这便是世道轮回，多年前她从蒙古嫁到大清，如今蓝琪儿就要从大清嫁到蒙古。天意如此，强求不得。</p><p>我终于站在长安的街道上做着浪迹天涯的梦了。原来长安的街道和家乡的也没有什么两样。这样青白颜色的砖头，这样浅浅弥漫的风尘，我曾见到过许多次。我匆匆地走，与平时匆匆走去补习班的神情一模一样。好像自己并不是个异乡客，而生于斯，长于斯，理所应当地行于斯。</p><p>长安，长安，我的长安。我来这儿也许是件荒唐的事情，当然，你也可以说是件了不起的事情。不怪我太多情，都怪长安二字太动人，真真叫人魂牵梦萦。你甭笑话我。张璨《戏题》云：“书画琴棋诗酒花，当年件件不离它。而今七事都更变，柴米油盐酱醋茶。”可是，难道所有汗水淋漓的追逐与自以为是的坦荡，最终都会轻描淡写地被证明为“年少轻狂”，哈哈一笑，不着痕迹？是否所有信誓旦旦的承诺与气贯长虹的梦想，都与青春一并被埋葬，无疾无终，杳无音信？</p><h2 align="center">三</h2><p>我匆匆地走，抬眼瞧见一家卖羊肉泡馍的小馆子，便匆匆地往进闯。门口黑衣黑裤的青年于忙忙碌碌中腾出一只手拦住我：“哎哎哎，干什么的？”</p><p>我答：“吃饭。”</p><p>“您几位？一位？”</p><p>“一位。”</p><p>于是这人放下手，味道十足地朝里吼了一嗓子：“招呼嘞──”</p><p>过来招呼的小哥哥长了一张稚嫩的脸，我怀疑他的实际年龄还没我大。他拿过来一张干巴巴的饼子，心不在焉地做着示范：“我告诉你，先这样掰……”突然，他停下来看我，说：“你会吧？”我想了想以前在食堂和室友吃羊肉泡馍的情形：把汤仅仅当汤喝，把饼仅仅当饼嚼。一边喝寡淡的汤，一边嚼干巴巴的饼。要说“泡馍”，其实被泡的馍和原先的饼在体积上相差不大，掰两次和掰三次也无多大区别。但我居然点了点头，于是这位小哥哥便转身头也不回地走掉了。</p><p>我习惯性地观察着他的眼睛，暗暗地想果然这世上再没有第二个人拥有那样清明的眼了。这莫非就是传说中的“曾经沧海难为水”，见过了汗漫沧海，再难驻足澹澹水泊。</p><p>还好，很快就有一个小姐姐过来询问我掰好没，顺便化解了我的小尴尬。这估计是姐弟俩，都有着那样的长睫毛和大眼睛。我笑，她也笑。</p><p>长安的一切，都是被诗化了的东西。羊肉泡馍也是。</p><p>我突然觉得有些乏味，看看窗外，天色已经暗下来了。</p><p>而这条街的繁华与喧闹，才刚刚开始。</p><p>我照样匆匆地走，走过熙熙攘攘的人群，走过青石平铺的长阶，走过飞檐画壁的鼓楼。我站在长阶上转身，看到许许多多的鸟儿在鼓楼上方盘旋飞舞，许许多多的游客不顾光线昏暗拿手机对着天，想要拍下这一幕。后来，我问萌萌姐，是不是每天都有这么多的鸟绕着鼓楼飞？萌萌姐说，当然不是啦，嘿，你碰上了好时候。①</p><p>长安，长安，原来，你知道我会来。</p><p>这些话，我早就想说了：我想，想过许多遍，在另一个平行时空，你我定是无话不谈的兄弟，定是高山流水般的知己，定能有在山水间笑傲江湖的豪气，亦或是浊酒一杯论古今，惺惺相惜。也许，走过了千里万里，一直到时光的尽头，我们会相遇。而那时，久别重逢，往事莫重提。</p><h2 align="center">四</h2><p>灯影幢幢，我迷失在狭窄的十字街头。也许我该一直向前走，莫回头。我曾经把韦小宝和疯子的梦想作为自己的梦想：睡在天桥下，地为床，风为被，星河作帐。于是好友拿这事儿调侃我：“你把人家乞丐的位置占了，乞丐怎么办？噫，小心被群殴！”我说：“那我要当丐帮帮主，带领弟兄们拓展盘口。振臂一呼，各路英雄云集响应，天下豪杰聚集于前……天地之大，岂无我容身之处？”</p><p>我果然是一个彻彻底底的理想主义者。</p><p>我就是那匹孤独的荒原狼。</p><p>有十个海子，三个在乡村瞧着高过窗的谷物微笑，三个在面朝大海春暖花开的房子里醉死梦中，三个在凡·高的向日葵前像向日葵一样地燃烧，还有一个在寂静中卧轨自杀。现在有十个我，三个在故乡小城里漫无目的地游荡，三个在杏园挥毫买醉，三个在独自远行时被绑架，还有一个在冷风中查着百度地图。</p><p>岁月悠长，长夜一如既往。</p><p>我到底是得回去。</p><p>我趴在小旅馆软软的床上胡思乱想，想刚才那个卖包子的真是个奸商，九个小笼包卖五块钱，每个包子还和缩了水似的丁点儿大。据说《端午的鸭蛋》里对咸鸭蛋的描述后来成了检验咸鸭蛋的标准，那我家巷口体育南路的包子铺就是我检验小笼包的标准。不过人在江湖漂，奸商的气不得不受。</p><p>我一直往下沉。罗辑和庄颜坠入爱河时也是这样的感觉吗，卢浮宫在熔化，小旅馆也在熔化，四壁在倾塌，漩涡在无声中轰鸣……世界渐渐变得安静，四周变得虚无，深渊黑不见底，这是黑夜，还是光明？我在一片黑色中眺望远方的黑色，可我分明感受不到害怕，也没有凌空蹈虚的感觉。我听到袅袅的歌声从远方传来，像空山中的梵呗。我听清了，那是一句唱词，我知道的：</p><div style="font-family:楷体;font-size:17px;"><p>“有落羽在陌上纷纷洒洒”</div></p><p>我知道下一句。于是我唱了起来：</p><div style="font-family:楷体;font-size:17px;"><p>“有素手在闺中细数落花”</p><p>“有迦楼罗穿空火羽焕云霞”</p><p>“有三生石安睡月光笼轻纱”</p><p>“有少年意气风发鲜衣怒马”</p><p>“有僧人只身安守荒凉古刹”</p><p>“有血色的火焰灼伤了天涯”</p><p>“有洁白的鹅毛渐隐了光华”</p><p>“有一纸血染江山如画”</p><p>“有三千弱水余生似茶”</p><p>“有大鹏展翅尽天地浩大”</p><p>“有垂柳摇丝正春风袅娜”</p><p>“有笔墨浓稠书写的一笔一画”</p><p>“有娇袭不稳轻躺的玉枕软榻”</p><p>“有铁马金戈声喑哑”</p><p>“有离别诗词句芜杂”</p><p>“这荒唐的天下”</p><p>……</p></div><p>我觉得自己似乎做了一场春秋大梦。睁开眼睛，床头的灯仍亮着。我突然开始想念姥姥家墙画上的那只黑白花猫。姥姥曾经养过一只与画上一模一样的猫。我给它起了个名字，叫做大梦。它曾和姥姥后来养的许多只猫一样，在寒冷的冬夜，偷偷钻进我的被窝取暖，然后在清晨我醒来掀开被子时飞速离开。</p><p>毕竟尘世一场梦，万古春秋不留痕。</p><p>记得人间留连处，你我皆是梦里人。</p><h2 align="center">五</h2><p>在返程之前，我还有大把的时间可以挥霍。</p><p>我匆匆地走，走过热污染严重的大巴车，走过光线昏暗的地下通道，走过疑似人贩子的制服男。我走到小土路的尽头，走上杨柳成荫的柏油路。路旁的栏杆后有铺得整整齐齐的黄砖，还有一座有点儿意思的建筑物。我听到嗡嗡的电动车一闪而过，听到吃着冰激凌的少男少女在嬉笑打闹，听到公路上的汽车嘀嘀地吹着喇叭，但很显然，尽管如此，这个地方还是比城中的繁华街市安静许多。</p><p>这是一处略显冷清的景点。</p><p>没有人流，我也懒得去寻它的入口。我沿着栅栏慢慢地走，看到了那座建筑后面旷荡的广场，以及零星几个在长凳上或躺或坐的行路人。头顶的枝叶密密匝匝，遮住了铺天盖地的阳光。我在长凳上铺开三张大号的广告纸，然后拿出两本闲书作枕头。没有人注意我，于是我便躺了下来。</p><p>妙得很。</p><p>请允许我细细描绘一下当时的情境：</p><p>目所能及处，枝叶阴翳，影影绰绰，碎影千重，窸窸窣窣，天色疏朗，明灭可睹，宛若高人作画，恰似世外仙境。由外到内，形成由翠绿到青绿的渐变色，其中掺杂明黄点点，随风而动，灵动蹁跹。透过叶的隙，可见朗澈天色，明净而纯粹。所有的楼寓旷野，古道风尘都在画布之外，唯有青波翠幛映了满目。</p><p>左边栅栏外，时有自行车“沙沙”的声音，还有一队戴着小红帽的小朋友经过。右边向远，竟传来悠悠的琵琶声，不绝如缕，如雾如纱，令人思慕起悠长悠长的雨巷。然而那分明是一片弥漫着黄土气息的旷场，在这种地方听琵琶感觉还真是奇妙。</p><p>妙得很。</p><p>我没有瞻仰过秦王的陵墓，没有拜访过香积寺的高塔，没有领略过骊山阿房的沧桑，但那又怎么样，此处即长安，这便是我的长安。</p><p>长安，长安，此处即长安。</p><p>寻寻觅觅，寻寻觅觅，也许，我已经寻到了。</p><p>“向鱼问水，向马问路，向神佛打听我一生的出处。”②</p><p>鱼说：“游曳之处便得水。”</p><p>马说：“蹄踏之处便成路。”</p><p>佛说：“花开世界可堪渡，何惧有一尊佛祖，两世糊涂。”</p><h2 align="center">六</h2><p>现在，我正坐在教室里，盯着语文专项训练卷发呆。</p><p>诗歌鉴赏第五题选了首宋词：</p><div style="font-family:楷体;font-size:17px;" align="center"><p>虞美人</p><p>舒亶</p><p>芙蓉落尽天涵水，日暮沧波起。</p><p>背飞双燕贴云寒，独向小楼东畔倚阑看。</p><p>浮生只合尊前老，雪满长安道。</p><p>故人早晚上高台，赠我江南春色一枝梅。</p></div><p>故人哟，你若是偶遇了江南的梅花，记得折一枝，包起来，寄给我。</p><br><p><strong>注：</strong> ① 这里的鸟儿其实是燕子。相对于高楼大厦，钟鼓楼的土木建筑更适合燕子筑巢。在清晨或傍晚，经常可以看到成百上千只燕子盘旋在钟鼓楼上空，景象颇为壮观。② 这句诗出自张子选《藏地诗篇》，全诗如下：</p><div style="font-family:楷体;font-size:17px;" align="center"><p>向鱼问水，向马问路</p><p>向神佛打听我一生的出处</p><p>而我呀</p><p>我是疼在谁心头的一抔尘土</p><p>一尊佛祖，两世糊涂</p><p>来世的你呀</p><p>如何把今生的我一眼认出</p></div><style>p{text-indent:2em;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;div style=&quot;font-family:楷体;&quot;&gt;

&lt;p style=&quot;font-size:17px;&quot;&gt;这篇文章其实是我高中时代的随心之作，就这么丢了太可惜，故在博客做一留存。&lt;/p&gt;

&lt;p style=&quot;font-size:17px;&quot; align=&quot;right&quot;</summary>
      
    
    
    
    <category term="随笔" scheme="https://ajiang0704.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://ajiang0704.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
